/*
/ PROGRAM PURPOSE: The MACPAGE macro generates page numbers on SAS output and
/ can perform some page formatting.
/
/ The macro has two basic operating modes. Capture mode causes the
/ SAS system to capture output normally written to the SAS .LST file.
/ The macro is call twice in capture mode once to start capture and once
/ to end capture and process the captured output.
/
/ The macro may also be directed to process a specific file, via the INFILE=
/ parameter.  In this mode the macro is called only once.
/
/        CREATED BY: John Henry King
/       MODIFIED BY: Carl Arneson
/  MODIFIED MORE BY: John Henry King
/ MODIFIED AGAIN BY: Carl Arneson
/
/ INPUT PARAMETERS:
/
/ capture=  The capture parameter causes MACPAGE to enter capture mode.
/           Use CAPTURE=ON as the only parameter in the first call to
/           macpage.  In your second call use CAPTURE=OFF along with any
/           other parameters that you may need.  The default setting is
/           null.
/
/ file=     Specifies the physical file specification for the output file.
/           When this is left blank, the file name of the job will be used,
/           and the filetype will be "OUn".  Where n is indexed from the
/           string, 0123456789abcdefghiklmnopqrstuvwxyz.  Therefore the first
/           call to macpage uses the filetype OU0, the second OU1 and so on
/           for a total of 36 seperate filetypes that can be generated by
/           one program. The default setting is null, which invokes automatic
/           nameing.
/
/ infile=   Specifies a file name to use as input for macpage.  This parameter
/           causes macpage to process the file named in INFILE= instead of
/           using file capture mode.
/
/ disp=     Specifies whether you want to append the output from the current
/           macpage call to the contents of the output file from a previous
/           macpage call.
/           When this parameter is left blank, the contents of the output file
/           will be re-written, DISP=OLD.  The default setting is null.
/
/ target=   Specifies a single character or character string target which
/           %MACPAGE will look for when positioning the numbers on the
/           output pages.  The target must be specified in either double or
/           single quotes.  If target is not specified then page numbers will
/           not apear on the output.  The default setting is hex FF.
/
/ jobid=    Specifies a target for the "JOBID" string (i.e. "userid(filename) date time").
/           Valid values are:
/              UR upper right (the default)
/              UL upper left
/              UC upper centered.
/
/
/ jobinfo=  Specifies the format used int the jobid string.
/           Valid values are:
/              LONG            full path in filename
/              SHORT           filename only
/
/ justify=  Specifies whether page number text will be right, left, or
/           center justified.  The default setting is Right.
/
/
/ ls=       Specifies the linesize used in determining the placement of the page
/           numbers for right justified and centered page numbers.  The default
/           is 132.
/
/ style=    Specifies the style used for page numbering.  The default is PAGEOF.
/
/ sigspace= Specifies the hex codes for characters that %MACPAGE will translate
/           into blank spaces.  These characters can then be used as "hard" spaces
/           in SAS output.  The default string is '00373f41ff'x
/
/ fpage=    Specifies the starging page number.  The default is 1.
/
/ adjust=   Specifies that number of columns to skip on the left margin before printing
/           out each line the report.  The default is 0.
/
/ skip=     Specifies the number of lines to skip on the top margin before printing
/           each page. The default is 0.
/
/ pluses=Y  This parameter causes macpage to change all occurances of ++ to
/           dashdash using the proper dash character as specified by DASHES=
/
/ dashes=_DEFAULT_
/           Specifies the dash character to use the default for SUN UNIX is
/           hex C4
/
/ pub=      Use pub=NO to overide the macros actions when _docman_=1. If you have
/           some output that is not to be included in the DONELIST and prepared
/           for the document center use pub=no.
/
/ proj=     Used to name the DONELIST.  When this variable is blank, the usual case,
/           the macro uses the value of $PROJ environment variable.
/
/ type=     Specifies the output type.  Use T for table, A for appendix, and
/           F for figure.  This data is used to write the donelist.
/
/ num=      Specifies the output table number.  This is a read number and my be
/           preceded by a single uppercase letter.  This will order the output
/           within types of output.
/
/ toc=      Specifies the output table of contents text entry.  Normally, this should
/           match the output title.  Use standard ASCII characters ONLY.
/
/ NOTE: If you use the TITLES system, &TYPE, &NUM, and &TOC global macro variables
/       will be created and contain the appropraite information to use in TYPE=,
/       NUM=, and TOC=.  For example, the following is a typical call to the DOCMAN
/       version of MACPAGE.
/
/        %macpage(capture = on)
/
/           proc report ......;
/              ...
/              run;
/
/        %macpage(capture = off)
/
/
/ OUTPUT CREATED: A file specified in the FILE= parameter.
/
/ MACROS CALLED:
/   %fn    a macro to parse &SYSPARM
/
/
/===============================================================================*/

%macro MacPage(file = ,
             infile = ,
               disp = ,
            capture = ,
             target = 'FF'x,
              fpage = 1,
              style = Pageof,
            justify = Right,
              jobid = UR,
            jobinfo = SHORT,
                 ls = ,
				 ps = ,
             adjust = 0,
               skip = 0,
             pluses = Y,
             dashes = _DEFAULT_,
           sigspace = 'FEFF'x,
		     inpage = '0C'x,
			outpage = _DEFAULT_,
	       outbreak = _DEFAULT_,
                pub = YES,
               proj = ,
               type = ,
                num = ,
                toc = );


%*******************************************************************************
* PUB=NO.  I will try to get this working on the PC later.
*******************************************************************************;
%let pub = NO ;

%*******************************************************************************
* Process the CAPTURE= parameter
*******************************************************************************;
%if %qupcase(&capture)=YES | %bquote(&capture)=1 | %qupcase(&capture)=ON
    %then %let capture = 1 ;
    %else %let capture = 0 ;

%*******************************************************************************
* First call to MACPAGE, CAPTURE=ON, this section is executed to issue needed 
* filename statement to create filerefs
*******************************************************************************;
%if (&capture) & %bquote(&infile)= %then %do ;

  %global _mcpunit ;
  %let _mcpunit = 99 ;

  FILENAME FT&_mcpunit.F001 DISK "FT&sysjobid.F001.LISTING" ;

  PROC PRINTTO PRINT=FT&_mcpunit.F001 NEW ;
    RUN ;

%end ;

%*******************************************************************************
* Second call CAPTURE=OFF then do this section
*******************************************************************************;
%else %do ;

  %*****************************************************************************
  * If INFILE= is not blank issue fileref for that file
  *****************************************************************************;
  %if %bquote(&infile)^= %then %do ;
    %local _mcpunit ;
    %let _mcpunit = 99 ;
    FILENAME FT&_mcpunit.F001 DISK "&infile" ;
  %end ;

  %*****************************************************************************
  * Otherwise, turn off PRINTTO
  *****************************************************************************;
  %else %do ;
    PROC PRINTTO ;
      RUN ;
  %end ;

  %*****************************************************************************
  * Determine if we are operating in DOCMAN mode
  *****************************************************************************;
  %local __proj__  __pub__ __outd__ ;
  %if       %quote(&pub)=                %then %let __pub__ = YES ;
  %else %if %upcase(%substr(&pub,1,1))=N %then %let __pub__ = NO  ;
  %else                                        %let __pub__ = YES ;

  filename dummy dummy 'dummy' ;

  proc printto log=dummy ;
    run ;

  %if  %quote(&proj)= %then %let __proj__ = %sysget(PROJ) ;
  %else                     %let __proj__ = %quote(&proj) ;
  %let __outd__ = %sysget(OUTPUT) ;

  proc printto ;
    run ;

  filename dummy clear;

  %*****************************************************************************
  * See if _docman_ has been set to 1 upon initialization, and if so,
  * make sure all the necessary elements are in place
  *****************************************************************************;
  %global _docman_ ;
  %if %quote(&_docman_)= %then %let _docman_=0 ;
  %if &_docman_ %then %do ;
    %global __type__ __num__ __toc__ ;
    %if %quote(&__pub__)=YES %then %do ;

      %if %bquote(&type)= & %bquote(&__type__)^= %then %do ;
        %let type = %bquote(&__type__) ;
      %end ;
      %if %bquote(&num)= & %bquote(&__num__)^=   %then %do ;
        %let num  = %bquote(&__num__) ;
      %end ;
      %if %bquote(&toc)= & %bquote(&__toc__)^=   %then %do ;
        %let toc = %bquote(&__toc__) ;
      %end ;


      %if %quote(&type)= | %quote(&num)= %then %do ;
        %put ERROR:  TYPE and NUM parameters required for DOCMAN MacPage. ;
        %goto mpexit ;
      %end ;

      %if %quote(&__proj__)= | %quote(&__outd__)= %then %do ;
        %put ERROR:  PROJ and OUTPUT enviromental variables must be set. ;
        %goto mpexit ;
      %end ;

      %if %nrbquote(&toc)= %then
        %put NOTE:  Assumed continuation of multipart FSP element. ;

      %if %index(TFASLDC,&type)=0 %then %do ;
        %put ERROR:  DOCMAN MacPage TYPE parameter must be T, F, A, S, L, D, or C. ;
        %goto mpexit ;
      %end ;

      %*************************************************************************
      * Establish a fileref for the DONELIST file
      *************************************************************************;
      FILENAME DONELIST DISK "%sysfunc(trim(&__outd__))\%sysfunc(trim(&__proj__)).donelist" MOD ;

    %end ;
  %end ;

  %*****************************************************************************
  * Process the PLUSES= parameter
  *****************************************************************************;
  %if %bquote(&pluses)^= %then %let pluses = %upcase(%substr(&pluses,1,1)) ;

  %*****************************************************************************
  * Determine linesize and pagesize
  *****************************************************************************;
  %if %quote(&ls)= %then %do ;
    %let ls=%sysfunc(getoption(LINESIZE)) ;
  %end ;
  %if %quote(&ps)= %then %do ;
    %let ps=%sysfunc(getoption(PAGESIZE)) ;
  %end ;

  %*****************************************************************************
  * Set filename if it is blank and we are operating in background
  *****************************************************************************;
  %global mcpginc ;
  %if &mcpginc= & %bquote(&file)=
      %then %let mcpginc = 001 ;
      %else %if %bquote(&file)= %then %let mcpginc = %eval(&mcpginc+1) ;
  %if &UTSYSJOBINFO ~= INTERACTIVE %then %do ;
    %if %bquote(&file)= %then %do ;
      %let file = %fn ;
      %if %bquote(&file)=
          %then %let file = macpop&_mcpunit..list&mcpginc ;
          %else %let file = &file..ou%substr(0123456789abcdefghijklmnopqrstuvwxyz,&mcpginc,1) ;
    %end ;
  %end ;
  %else %do ;
    %let file = PRINT ;
  %end ;

  %*****************************************************************************
  * If OUTPUT was set and we are operating in DOCMAN mode, make sure
  * FILE uses OUTPUT directory.  If OUTPUT is set and we are not in DOCMAN
  * mode, use OUTPUT only if FILE doesnt already have a directory specified.
  *****************************************************************************;
  %if %bquote(&__outd__)^= %then %do ;
    %if %quote(&__pub__) = YES %then %do ;
      %local root ;
      %let file = %sysfunc(reverse(&file)) ;
      %let file = %scan(&file,1,%str(\)) ;
      %let root = %sysfunc(reverse(&file)) ;
      %let file = %sysfunc(trim(&__outd__))\%sysfunc(reverse(&file)) ;
    %end ;
    %else %if %index(&file,%str(\))=0 %then %do ;
      %let file = %sysfunc(trim(&__outd__))\&file ;
    %end ;
  %end ;

  %*****************************************************************************
  * Keep track of the number of times this FILE was used within this 
  * SAS session
  *****************************************************************************;
  %let disp = %upcase(&disp) ;
  %global _mcpf0 ;
  %local f ;
  %if &_mcpf0 = %then %do ;
    %let _mcpf0  = %eval(&_mcpf0 + 1) ;
    %global _mcpf1 _mcpfn1 ;
    %let _mcpf1  = &file ;
    %let _mcpfn1 = 1 ;
    %let f       = 1 ;
  %end ;
  %else %do ;
    %do f=1 %to &_mcpf0 ;
      %if "&file"="&&_mcpf&f" %then %do ;
        %let _mcpfn&f = %eval(&&_mcpfn&f + 1) ;
        %goto exit ;
      %end ;
    %end ;
    %let _mcpf0 = &f ;
    %global _mcpfn&f _mcpf&f ;
    %let _mcpf&f = &file ;
    %let _mcpfn&f = 1 ;
  %end ;
  %exit:

  %*****************************************************************************
  * If DISP was not set explicitly, set it according to whether other calls
  * within the SAS session used the same FILE.  For interactive sessions,
  * blank it out all together.
  *****************************************************************************;
  %if %bquote(&file)=PRINT
        %then %let disp = ;
  %else %if "&disp"="" %then %do ;
    %if &&_mcpfn&f = 1
        %then %let disp = ; 
        %else %let disp = MOD ;
  %end ;

  %*****************************************************************************
  * Determine the desired placement and format of the paging text string
  *****************************************************************************;
  %local at tof count txt format chapter ;

  %* set horizontal placement ;
  %let justify = %substr(%upcase(&justify),1,1) ;
  %if       %quote(&justify)=L %then %let at = 1 ;
  %else %if %quote(&justify)=C %then %let at = ROUND((LS2-LEN)/2) ;
  %else                              %let at = (LS2 - LEN) ;

  %* set vertical placement (TARGET= is the only option for placement now) ;
  %if %quote(&target)= %then %let tof = 0 ;
  %else                      %let tof = INDEX(LINE,&TARGET) ;

  %* set up page text string based on desired STYLE ;
  %if ^%index(%quote(&style),%str(.)) %then %let style = %upcase(&style) ;
  %if %quote("&style") = "PAGE" %then %do ;
    %let txt=%str('Page '||COMPRESS(PUT(PAGE,8.))) ;
    %let count = 0 ;
  %end ;
  %else %if %index(%quote(&style),%str(.)) %then %do ;
    %let chapter = %scan(&style,1,%str(.)) ;
    %let format  = %scan(&style,2,%str(.)) ;
    %let txt=%str("&chapter"||'.'||LEFT(PUT(PAGE,&format..))) ;
    %let count = 0 ;
  %end ;
  %else %if %quote("&style") = "SAS" %then %do ;
    %let txt=%str(left(PUT(PAGE,8.))) ;
    %let count = 0 ;
  %end ;
  %else %if %quote("&style") = "PAGEOF" %then %do ;
    %let txt=%str('Page '||COMPRESS(PUT(PAGE,8.))||' of '||COMPRESS(PUT(PAGES,8.))) ;
    %let count = 1 ;
  %end ;
  %else %if %quote("&style") = "BRIEF" %then %do ;
    %let txt=%str(compress(PUT(PAGE,8.))||' of '||COMPRESS(PUT(PAGES,8.))) ;
    %let count = 1 ;
  %end ;

  %*****************************************************************************
  * Determine the desired placement and format of the job info text string
  *****************************************************************************;
  %let jobid = %upcase(&jobid) ;
  %let jobinfo = %upcase(&jobinfo) ;
  %if %bquote(&jobid)^= %then %do ;
    %local jobtxt jobcond jobjust ;

    %* set JOBINFO string based on desired style ;
    %if &jobinfo=SHORT %then      %let jobtxt=&SYSUSERID(%fn) ;
    %else %if &jobinfo=LONG %then %let jobtxt = %str(&SYSUSERID.[&UTSYSJOBINFO]) ;
    %else                         %let jobtxt = &SYSUSERID ;

    %* set condition for vertical placement (U-pper line of page or T-arget) ;
    %if %substr(&jobid,1,1)=U %then 
      %let jobcond=(PGBREAK | LINECNT=1) ;
    %else %if %substr(&jobid,1,1)=T %then 
      %let jobcond=(TARG) ;
    %else 
       %let jobid= ;

    %* set horizontal placement of JOBINFO string ;
    %if       %substr(&jobid,2,1)=L %then %let jobjust=SUBSTR(SUBLINE,1,LEN) ;
    %else %if %substr(&jobid,2,1)=R %then %let jobjust=SUBSTR(SUBLINE,LS2-LEN,LEN) ;
    %else %if %substr(&jobid,2,1)=C %then %let jobjust=SUBSTR(SUBLINE,ROUND((LS2-LEN)/2),LEN) ;
    %else                                 %let jobid= ;

  %end ;

  %*****************************************************************************
  * Issue appropriate filename statements
  *****************************************************************************;
  %if %bquote(&infile)^= %then %do ;
    FILENAME FTXXF001 DISK "&infile" ;
  %end ;
  %else %do ;
    FILENAME FTXXF001 DISK "FT&sysjobid.F001.LISTING" ;
  %end ;
  %local mpfileref ;
  %if &file~=PRINT %then %do ;
    %let mpfileref = XXXPAGE ;
    FILENAME XXXPAGE DISK "&file";
  %end ;
  %else %let mpfileref = PRINT ;

  %*****************************************************************************
  * Start main file processing data-step
  *****************************************************************************;
  DATA _NULL_ ;

    %* if operating in DOCMAN environment, set PART STYPE and NUM ;
    %if &_docman_ & %bquote(&__pub__)=YES %then %do ;
      LENGTH PART $1 STYPE $1 NUM $13 ;
      PART = ' ' ;

      %if %index(ABCDEFGHIJKLMNOPQRSTUVWXYZ,%substr(&num,1,1))=0 %then %do ;
        NUM = "&num" ;
      %end ;
      %else %do ;
        PART = "%qsubstr(&num,1,1)" ;
        NUM  = "%substr(&num,2)" ;
      %end ;

      %if       %quote(&type)=T %then %do ; STYPE = "X" ; %end ;
      %else %if %quote(&type)=F %then %do ; STYPE = "Y" ; %end ;
      %else %if %quote(&type)=A %then %do ; STYPE = "Z" ; %end ;
      %else %if %quote(&type)=L %then %do ; STYPE = 'Y' ; %end ;
      %else %if %quote(&type)=S %then %do ; 
                                            STYPE = 'X' ;
                                            PART  = 'S' ; 
      %end ;
      %else %if %quote(&type)=D %then %do ;
                                            STYPE = 'Z' ;
                                            PART  = '3' ;
      %end ;
      %else %if %quote(&type)=C %then %do ; 
                                            STYPE = 'Z' ; 
                                            PART  = '4' ;
      %end ;
      %else                           %do ; STYPE = "-" ; %end ;

    %end ;

    %* initialize various variables ;
    LS2      = &ls ;
    PAGES    = MAX(&fpage  + 0 - 1 , 0) ;
    PAGE     = MAX(&fpage  + 0 - 1 , 0) ;
    ADJUST   = MAX(&adjust + 0 , 0) ;
	IF "&mpfileref"="PRINT" THEN ADJUST = ADJUST + 1 ;
    SKIP     = MAX(&skip   + 0 , 0) ;
    MINUS    = -1 ;
    LINECNT  = 0 ;
    LINES    = 0 ;
    TOOLONG  = 0 ;
    __MAXL__ = &ps ;

    %* set DASHES character ;
    %if %bquote(&pluses)=Y %then %do ;
	  LENGTH DASHES $1 ;
      %if &dashes=_DEFAULT_ %then %do ;
        DASHES = SUBSTR(GETOPTION("FORMCHAR"),2,1) ;
	  %end ;
      %else %do ;
        DASHES = &dashes ;
      %end ;
    %end ;

    %* count all pages based on TARGET if STYLE calls for it ;
    %if %quote(&target)^=  & &count %then %do ;
      INFILE FT&_mcpunit.F001 NOPRINT EOF=EOF1 LENGTH=LENGTH1 ;
      DO WHILE(1) ;
        INPUT @1 LINE $VARYING200. LENGTH1 ;
        IF &tof THEN PAGES + 1 ;
      END ;
      EOF1:
    %end ;

	%* read the file a second time and process filter actions ;
    INFILE FTXXF001 NOPRINT EOF=EOF2 LENGTH=LENGTH2 ;
    FILE &mpfileref  noprint notitles &disp ;

    DO WHILE(1) ;
      LENGTH SUBLINE $200 TXT $200 ;
      INPUT @1 LINE $VARYING200. LENGTH2 ;

      LINECNT + 1 ;
      SUBLINE = LINE ;

      %* get INPAGE and OUTPAGE separator ;
      LENGTH INPAGE OUTPAGE $200 ;
      INPAGE = &inpage ;
	  %if %qupcase(&outpage)=_DEFAULT_ %then %do ;
	    %if %bquote(&file)=PRINT %then %do ;
		  OUTPAGE = REPEAT(SUBSTR(GETOPTION("FORMCHAR"),13,1),&ls - 1) ;
		  OUTBREAK = 1 ;
		%end ;
		%else %do ;
		  OUTPAGE = INPAGE ;
		  IF LENGTH(OUTPAGE)>1 THEN OUTBREAK = 1 ;
		  ELSE OUTBREAK = 0 ;
		%end ;
	  %end ;
	  %else %do ;
	    OUTPAGE = &outpage ;
		%let outbreak = %upcase(&outbreak) ;
		%if %bquote(&outbreak)=_DEFAULT_ %then %do ;
		  IF LENGTH(TRIM(OUTPAGE))>1 THEN OUTBREAK = 1 ;
		  ELSE OUTBREAK = 0 ;
		%end ;
		%else %do ;
		  OUTBREAK = ("%substr(&outbreak,1,1)"="Y") ;
		%end ;
	  %end ;

      %* insert a INPAGE separator in the first line if it wasnt there already ;
      IF LINECNT=1 AND &&_mcpfn&f>1 
                   AND SUBSTR(SUBLINE,1,LENGTH(TRIM(INPAGE)))~=INPAGE
        THEN SUBLINE = TRIM(INPAGE) || SUBLINE ;

	  %* separate page breaks from main line ;
	  IF SUBSTR(SUBLINE,1,LENGTH(TRIM(INPAGE)))=INPAGE THEN DO ;
	    PGBREAK = 1 ;
		SUBLINE = SUBSTR(SUBLINE,LENGTH(TRIM(INPAGE))+1) ;
	  END ;
	  ELSE PGBREAK = 0 ;

      IF &tof THEN TARG = 1 ;
      ELSE         TARG = 0 ;

      %if %quote(&jobid)^= %then %do;
        IF &jobcond THEN DO ;
          LENGTH JOBID $200 ;
          JOBID = "&JOBTXT &SYSDATE &SYSTIME" ;
          LEN = LENGTH(JOBID) ;
          &jobjust = JOBID ;
        END ;
      %end ;

      LENGTH3 = LENGTH(TRIM(SUBLINE)) ;
      IF TARG THEN DO ;
        PAGE + 1 ;
        LINES = 1 ;
        TOOLONG = 0 ;
        TXT = &txt ;
        LEN = LENGTH(TXT) ;
        SUBSTR( SUBLINE , &at , LEN ) = TXT ;
        LENGTH3 = LENGTH(SUBLINE) ;
      END ;
      IF LINES>__MAXL__ THEN DO ;
        LENTRIM = LENGTH(TRIM('X' || SUBLINE)) ;
        IF LENTRIM>1 THEN DO ;
          IF ^TOOLONG THEN DO ;
            PAGE1 = PAGE + 1 ;
            FILE LOG ;
            PUT / "WARNING: Maximum lines exceeded on page" +1 PAGE1 ;
            FILE &mpfileref ;
          END ;
          TOOLONG = 1 ;
        END ;
      END ;

	  %* translate SIGSPACE characters to blanks ;
      SUBLINE = TRANSLATE(SUBLINE,' ',&sigspace) ;

	  %* translate strings of +s to DASHES ;
      %if %quote(&pluses)=Y %then %do ;
        IF INDEX(SUBLINE,'++') THEN DO ;
          SUBLINE = TRANWRD(SUBLINE,'++',REPEAT(DASHES,1)) ;
          SUBLINE = TRANWRD(SUBLINE,DASHES||"+",REPEAT(DASHES,1)) ;
        END ;
      %end ;

	  %* insert page breaks ;
	  IF PGBREAK THEN DO ;
	    OUTL = LENGTH(TRIM(OUTPAGE)) ;
	    IF OUTBREAK THEN PUT @1 OUTPAGE $VARYING200. OUTL ;
		ELSE PUT @1 OUTPAGE $VARYING200. OUTL @ ;
	  END ;

      %* insert skip lines ;
      %if &skip>0 %then %do ;
        IF LINECNT=1 | PGBREAK THEN DO I=1 TO SKIP ;
          PUT / @1 ' ' @ ;
        END ;
      %end ;

      %* insert output line ;
	  IF PGBREAK & ~OUTBREAK THEN
	    PUT @1 +ADJUST +OUTL SUBLINE $VARYING200. LENGTH3 ;
	  ELSE
        PUT @1 +ADJUST SUBLINE $VARYING200. LENGTH3 ;

    END ;

    EOF2:

	%* write to DONELIST ;
    %if %quote(&__pub__)=YES & &_docman_ %then %do ;
      LENGTH __FN__ $18 __USER__ $8 ;
      __USER__ = "&SYSUSERID" ;
      __FN__ = "&root";
      IF INDEX(NUM,".")=0 THEN NUM = TRIM(NUM) || ".0" ;
      NUM = PUT(INPUT(SCAN(NUM,1,"."),4.),4.) || "." ||
            LEFT(PUT(INPUT(SCAN(NUM,2,"."),8.),8.)) ;
      FILE DONELIST ;
      PUT STYPE $1. PART $1. NUM $13. @ ;
      PUT ' ' @ ;
      PUT __USER__ $9. __FN__ $18. @ ;
      PUT "&toc" ;
    %end ;

    CALL SYMPUT('___LC___',LEFT(put(LINECNT,8.))) ;
    FILE LOG ;
    PUT / "NOTE: MACPAGE numbered pages &fpage to " PAGE
        / '      ' skip= adjust=;
    STOP ;

    RUN ;

  %* delete routed file ;
  %local rc;
  %let rc = %sysfunc(fdelete(FT&_mcpunit.F001)) ;

  %* clear filerefs ;
  FILENAME FT&_mcpunit.F001 CLEAR ;
  FILENAME FTXXF001         CLEAR ;
  %if &mpfileref=XXXPAGE %then %do ;
    FILENAME XXXPAGE        CLEAR ;
  %end ;
  %if %bquote(&__pub__)=YES %then %do ;
    FILENAME DONELIST       CLEAR ;
  %end ;

%end ;

%mpexit:

%mend MacPage ;